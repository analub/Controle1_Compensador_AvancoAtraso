%% Trabalho Computacional - Controle I - Compensador Ava√ßo - Atraso
%{
    Integrantes: Ana Luisa Basilio de Castro, 
                 Gabriel Ferreira Freitas de Paula, 
                 Leonardo Nunes Rubbioli Cordeiro, 
                 Rafael Salzer Simas
%}

%% Inicializa√ß√£o do c√≥digo
% Limpando mem√≥ria, fechando figuras
clc
clear all
close all

% Modificando formato de exibi√ß√£o dos n√∫meros
format long

% Inicializando variavies:
s = tf('s');                    %variavel complexa s, F.T.
wn = 1.9;                       
zeta = 0.5;
k=0;                            % Inicializa o contador de solu√ß√µes

% Declara√ß√£o de vetores

% Declara√ß√£o das Fun√ß√µes de Transfer√™ncia (TF)
G = (2*s^2 + 4*s + 34)/(s*(s + 1.5)*(s + 5));
H = 1;

%% SISTEMA DE CONTROLE
%T√≥picos posteriores constam os varios itens do trabalho e sua execu√ß√£o

%% Letra a) Lugar das Ra√≠zes
% Ap√≥s declarar anteriormente a fun√ß√£o de transfer√™ncia (FT) G(s) e H(s) vamos usar o comando rlocus(FT) para exibir o gr√°fico do LR

% Determinando polos e zeros de G(s)
polos_G = pole(G);
zeros_G = zero(G);

% Determinando polos e zeros da FTMF; Obs: a FTMF ser√° denotada por A 
A = feedback(G,H);
%C√°lculo dos plos e zeros de A; 
polos_A = pole(A);
zeros_A = zero(A);

% Exibindo na Command Window os valores de polos e zeros de G(s) e A(s)
fprintf('_________________________________________\n');
fprintf('\n>> Fun√ß√£o de Transfer√™ncia G(s):\n');
G
fprintf('   Polos de G:\n');
disp(polos_G);
fprintf('   Zeros de G:\n');
disp(zeros_G);

fprintf('\n>> Fun√ß√£o de Transfer√™ncia em Malha Fechada A(s):\n');
A
fprintf('   Polos de A:\n');
disp(polos_A);
fprintf('   Zeros de A:\n');
disp(zeros_A);
fprintf('_________________________________________\n'); %Apenas para melhorar a visualiza√ß√£o na Command Window

%C√°lculo do wn e do zeta da FTMF (A) n√£o compensada
wn_A = abs(polos_A(2));
zeta_A = abs(real(polos_A(2))/wn_A);             %pols_A(2) para usar o polo complexo conjugado

% Criando o gr√°fico do Lugar das Ra√≠zes de G(s)
%armazenando em um vetor o LR de G para c√°lculos posteriores
rl_G = rlocus(G);           

% Inicializando figura e configurando o gr√°fico
rlocus(G,'k');
grid on
title('Lugar das Ra√≠zes de G(s), sistema n√£o compensado')
xlabel('Real')
ylabel('Imagin√°rio')
hold on                     %hold para adicionar ao mesmo gr√°fico os polos e zeros

% Plotando os polos e zeros de A(s)
plot(real(polos_A), imag(polos_A), 'rx', 'MarkerSize', 7.5, 'LineWidth', 1); % Polos (x vermelho)
plot(real(zeros_A), imag(zeros_A), 'ro', 'MarkerSize', 7.5, 'LineWidth', 1); % Zeros (o vermelho)

% Adicionando Œ∂ = 0.5 e wn1 = 1.9 rad/s ao mesmo gr√°fico
%{
    Breve explica√ß√£o dos c√°culos pt1 - Constru√ß√£o das retas
    Para construir as retas desejadas foi usado coordenadas polares, aproveitando a rela√ß√£o entre os angulos que obtemos 
    facilmente atrav√©s dos valores de Œ∂ e wn. A reta √© contru√≠da com refer√™ncia de √¢ngulo na origem e no sentido anti 
    hor√°rio, o √¢ngulo ser√° dado por theta_reta. O raio √© arbitr√°rio de acordo com a visualiza√ß√£o desejada do
    gr√°fico(escala), aqui variamos de 0 a 10.
%}
beta = acos(zeta);
theta_reta = pi - beta;
theta_reta_graus = 180*theta_reta/pi;

% Criando a reta a partir da origem
%Uso de coordenadas polares e transforma√ß√£o matem√°tica para obter x e y para o plot
r = linspace(0, 10, 100);      %Raio de 0 a 10 (ajust√°vel)
x = r * cos(theta_reta);       %Convers√£o coord polares
y = r * sin(theta_reta);

% Plotando reta para Œ∂ = 0.5
plot(x, y, 'c--', 'LineWidth', 0.5); %reta tracejada ciano

% Criando c√≠rculo de raio 1.9 para wn = 1.9rad/s
%{
    Breve explica√ß√£o pt2 - Contru√ß√£o dos c√≠rculos
    Para os circulos foi definido raio = wn. No plot ser√° aplicado v√°rios valores de x_circ e y_circ dentro da 
    circunfer√™ncia de raio wn. Os vetores de x,y_circ s√£o resultado da multiplica√ß√£o do raio (wn) por um conjunto 
    de valores de sen e cos aplicados a varia√ß√£o do angulo da circunfer√™ncia, que vai de 0 a 2pi, ou seja, uma 
    volta completa. 
%}
r_circ = wn;                            % Raio do c√≠rculo
theta_circ = linspace(0, 2*pi, 200);    % Varia√ß√£o angular para definir o c√≠rculo
x_circ = r_circ * cos(theta_circ);
y_circ = r_circ * sin(theta_circ);

% Plotando c√≠crulo para wn = 1.9rad/s
plot(x_circ, y_circ, 'b--', 'LineWidth', 0.5); %C√≠rculo azul tracejado

% Adicionando Œ∂_A = 0.97 e wn_A = 2.11 rad/s ao mesmo gr√°fico
%{
    Obs: O procedimento a seguir √© semelhante ao anterior, com diferen√ßa
    apenas nos valores de wn e Œ∂. Sendo assim, tamb√©m valem os mesmo coment√°rios
%}
beta_A = acos(zeta_A);
beta_A_graus = 180*beta_A/pi;
theta_reta_A = pi - beta_A;
theta_reta_graus_A = 180*theta_reta_A/pi;

% Criando a reta a partir da origem
x_A = r * cos(theta_reta_A);                  %Convers√£o coord polares
y_A = r * sin(theta_reta_A);

% Plotando reta para Œ∂1 = 0.97
plot(x_A, y_A, 'm--', 'LineWidth', 0.5);      %Reta tracejada magenta

% Criando c√≠rculo de raio 2.11 para wn1 = 2.11rad/s
r_circ_A = wn_A;                              %Raio do c√≠rculo
x_circ_A = r_circ_A * cos(theta_circ);
y_circ_A = r_circ_A * sin(theta_circ);

% Plotando c√≠crulo para wn1 = 2.11rad/s
plot(x_circ_A, y_circ_A, 'g--', 'LineWidth', 0.5); %C√≠rculo verde tracejado

% Adicionando uma legenda manual pois legend('texto') n√£o est√° rodando com rlocus
h1 = plot(NaN, NaN, 'k', 'LineWidth', 1.5);                     %Linha preta para o Lugar das Ra√≠zes
h2 = plot(NaN, NaN, 'rx', 'MarkerSize', 7.5, 'LineWidth', 1);   %Polos (x vermelho)
h3 = plot(NaN, NaN, 'ro', 'MarkerSize', 7.5, 'LineWidth', 1);   %Zeros (o azul)
h4 = plot(NaN, NaN, 'c--', 'LineWidth', 1.5);                   %Reta tracejada ciano para Œ∂ = 0.5
h5 = plot(NaN, NaN, 'm--', 'LineWidth', 1.5);                   %Reta tracejado magenta para Œ∂ = 0.21
h6 = plot(NaN, NaN, 'b--', 'LineWidth', 1.5);                   %C√≠rculo tracejado azul para wn = 1.9
h7 = plot(NaN, NaN, 'g--', 'LineWidth', 1.5);                   %C√≠rculo tracejado verde para wn1 = 2.11

%Comando legend('') usando as legendas manuais definidas anteriormente
legend([h1, h2, h3, h4, h5, h6, h7], 'Lugar das Ra√≠zes de G(s)', 'Polos de A(s)', 'Zeros de A(s)', 'Reta Œ∂ = 0.5', 'Reta Œ∂_A = 0.21', 'C√≠rculo œâ_n = 1.9 rad/s', 'C√≠rculo œâ_n_A = 2.11 rad/s');

hold off                                                        %Finalizando o hold


%% Letra B) Aplica√ß√£o de Degrau unit√°rio 

% Definindo vetor de tempo
t = (0:0.01:50);

% Aplicando degrau usando fun√ß√£o step()
resp_degrau = step(A,t);              %Armazenando na vari√°vel resp_degrau o degrau aplicado

% Plotando o gr√°fico com o degrau aplicado usando o vetor de tempo t definido
figure                                %Iniciando nova figura
plot(t, resp_degrau)                  %Plotando gr√°fico

%configura√ß√µes do gr√°fico
grid on
xlabel('Tempo t(s)')
ylabel('Amplitude')
title('Resposta no tempo do sistema n√£o compensado ao degrau unit√°rio')

%% Letra C) C√°lculo do sobressinal percentual, da frequ√™ncia ùëì e de ùúîùëë
% Para encontrar o sobressinal, vamos varrer o vetor 'degrau_ref' e encontrar seu valor m√°ximo usando a fun√ß√£o max() do MatLab.

Mp = max(resp_degrau);                      %Mp √© o sobressinal, valor m√°ximo de amplitude ao degrau

% C√°culando sobressinal percentual usando 100*(c(tp) - c(‚àû)/ c(‚àû))
Mp_percentual = 100* (Mp - resp_degrau(end)/resp_degrau(end));    %Resp_degrau(end) para encontrar c(‚àû) e aplicar a f√≥rmula anterior

% Exibindo na Command Window os valores de Mp e Mp_Percentual
fprintf('          Sobressinal             \n');

fprintf('\nMp = %.8f\n', Mp);
fprintf('Sobressinal Percentual = %.5f%%\n', Mp_percentual);
fprintf('_________________________________________\n');

% C√°lculo de ùëì e de ùúîd
%{
  Para encontrarmos f e wd vamos calcular o per√≠odo entre picos; para isso √© preciso encontrar os picos da resposta ao 
  degrau e depois calcular o per√≠odo, o que √© feito a seguir:
%}

%Armazenando os picos
[picos, T_p] = findpeaks(resp_degrau,t);

%Calculando o per√≠odo T
T = (T_p(2) - T_p(1));

%Calculando frequ√™ncia f e frequ√™ncia amortecida wd
f = 1/T; 
wd = 2*pi*f;

% Exibindo na Command Window os valores de f e wd
fprintf('          f e wd             \n');

fprintf('\nf = %.8f Hz\n', f);   
fprintf('wd = %.8f rad/s\n', wd); 
fprintf('_________________________________________\n');

% Comparando os valores com polos dominantes
%Definindo os polos dominantes de A(s); Mais pr√≥ximos ao eixo imagin√°rio, parte Re -> 0
polos_complexos = polos_A(imag(polos_A) ~= 0);  %Salvando em um vetor todos os polos com parte imagninaria !=0

% Encontrando o polo dominante (menor parte real)
%{
   Obs: o procedimento seguinte vale para v√°rios polos, nesse caso como s√≥ temos um par de polos complexos conjugados, 
   j√° poder√≠amos atribuir qual seria o dominante
%}

%Salvando o √≠ndice do polo dominante
[~, idx_dominante] = min(abs(real(polos_complexos)));

%Usando o indice no vetor polos_complexos definimos o polo_dominante
polo_dominante = polos_complexos(idx_dominante);      

%{ 
    COMENT√ÅRIO:
    Os c√°lculos manuais d√£o resultados parecidos com as f√≥rmulas de sistemas de segunda ordem, mas a diferen√ßa acontece porque o nosso sistema,
    como visto na Letra A, √© de terceira ordem. Mesmo com ganho unit√°rio, ele tem dois polos complexos conjugados e um polo real,
    o que o torna essencialmente de terceira ordem. Os resultados ficam pr√≥ximos porque os polos complexos conjugados t√™m maior influ√™ncia no comportamento do sistema,
    fazendo com que ele se pare√ßa com um de segunda ordem. Mas a precis√£o √© limitada pelas pr√≥prias caracter√≠sticas de um sistema de terceira ordem.
    A parte imagin√°ria dos polos dominantes e a frequ√™ncia amortecida tem rela√ß√£o direta, ou seja, s√£o equivalentes. 
    Temos a reala√ß√£o para s: s = œÉ +- jwd, sendo assim wd = parte imagin√°ria do polo dominante. 
    O que pode ser comprovado atrav√©s do erro aprx = 0 calculado a seguir:
%}
erro_wd_polo_dom = abs(imag(polo_dominante)) - wd;

%% Letra D) Aplica√ß√£o de Rampa

% Criando novo vetor de tempo para aplicar a rampa
t_ramp = (0:0.01:200);

% Para aplicar a rampa aqui no Matlab vamos usar o comando step(FT) mas aplicado a (1/s)*A
resp_rampa = step((1/s)*A,t_ramp);

% Plotando o gr√°fico
figure                                     %nova figura
plot(t_ramp, resp_rampa, 'k') %plotando em preto
hold on
plot(t_ramp, t_ramp, '--r')
legend('Resposta do Sistema a Rampa','Rampa Unit√°ria','Location','NorthWest');

%Configura√ß√µes do gr√°fico
grid on
xlabel('Tempo t(s)')
ylabel('Amplitude')
title('Resposta no tempo do sistema n√£o compensado a Rampa')
legend('Resposta do Sistema a Rampa','Rampa Unit√°ria','Location','NorthWest');

% C√°lculo da Constante de velocidade ùêæùë£ para ùê∫(ùë†) e Erro de Regime Permanente

%Temos que Kv = limite s->0 (sG(s)), sendo assim:
%Definindo a vari√°vel simb√≥lica e FTMA em u para calcular o limite
syms u;
[num_G, den_G] = tfdata(G, 'v');                %Obtendo os coeficientes do numerador e denominador de G
G_lim = poly2sym(num_G,u)/poly2sym(den_G,u);    %Definindo G(u) para o calculo do limite, pois s ja est√° reservado par tf

% Calculando Kv 
Kv = limit(u*G_lim,u,0);                        %Usando fun√ß√£o limit() para c√°culo do Kv

% Calculando o Erro de Regime Permanente
erro_regime_perm = double(1/Kv);

% Gr√°fico e erro observado
resp_rampa_200 = resp_rampa(end);

% Temos que erro_observado = entrada - saida
erro_obs = t_ramp(end) - resp_rampa_200;
erro_relativo = erro_obs - erro_regime_perm;

%{
    Ao calcular o limite de s tendendo ao infinito de s*G(FTMA), obtem-se o
    valor de 4.53, o que corresponde ao erro obsevado entre a sa√≠da para
    entrada em rampa no gr√°fico com a refer√™ncia. O erro relativo demonstra a diferen√ßa entre o 
    erro de regime permanente calculado e o observado, que √© baixo.

    Observa-se que as duas formas de calcular o erro chegam no mesmo valor
    quando executado o c√≥digo. Primeiramente, o erro de regime permanente √©
    calculado usando o valor de Kv encontrado atrav√©s do limite. √â poss√≠vel
    chegar ao mesmo valor de erro utilizando os pontos do gr√°fico. Com o
    compensador avan√ßo-atraso, pretende-se diminuir esse¬†erro¬†7¬†vezes
%}

% Exibindo na Command Window o valor de Kv e erro
fprintf('              Kv e Erros               \n');
fprintf('\nKv = %.4f\n', Kv);
fprintf('Erro de Regime Permanente = %.8f\n', erro_regime_perm);
fprintf('Erro Observado = %.8f\n', erro_obs);
fprintf('Erro Relativo = observ. - reg. perm = %.8f\n', erro_relativo);
fprintf('_________________________________________\n');


%% Letra E) Projetando um compensador avan√ßo-atraso

%C√°lculo do polo desejado a partir das especifica√ß√µes do projeto

%Primeiramente, √© calculada a parte real do polo
PoloDesejadoReal = -(wn*zeta);
%Depois, calcula-se a parte imagin√°ria do polo
PoloDesejadoImg = wn*sqrt(1-zeta^2);
%{
    Com isso, √© poss√≠vel escrever os polos complexos desejados, composto pela
    parte real e pela parte imagin√°ria (positiva e negativa)
%}

PoloDesejado1 = (PoloDesejadoReal) + (PoloDesejadoImg)*1i;
PoloDesejado2 = (PoloDesejadoReal) - (PoloDesejadoImg)*1i;
%{
    Tamb√©m √© necess√°rio calcular a defici√™ncia angular. √â utilizada a
    fun√ß√£o angle() para encontrar o √¢ngulo da diferen√ßa do polo
    desejado em rel√ß√£o aos polos e zeros do sistema. A fun√ß√£o rad2deg() √©
    utilizada para transformar o √¢ngulo de radianos para graus.
%}

DeficienciaAngular = 180 - rad2deg(angle(PoloDesejado1 - polos_G(1))) - rad2deg(angle(PoloDesejado1 - polos_G(2))) - rad2deg(angle(PoloDesejado1 - polos_G(3))) + rad2deg(angle(PoloDesejado1 - zeros_G(1))) + rad2deg(angle(PoloDesejado1 - zeros_G(2)));

%A defici√™ncia angular √© mostrada no Command Window
disp(['A defici√™ncia angular √©: ', num2str(DeficienciaAngular)]); 
disp('------------------------');

%{
Primeiramente, precisamos encontrar a posi√ß√£o do zero e do polo da parte do
avan√ßo do compensador. Para isso, √© uitlizado um for, e o zero √©
posicionado entre -4 e -0.5 no eixo real
%}
for ZeroAvanco = 0.5:0.05:4
    %{
        Como o for apresenta valores positivos, √© necess√°rio inverter o valor
        da posi√ß√£o do zero do avan√ßo
    %}
    ZeroAvanco = -ZeroAvanco;
    %{
        √â necess√°rio encontrar o valor do √¢ngulo Alfa. Ele √© o √¢ngulo da
        diferen√ßa entre o polo desejado e o zero do avan√ßo
    %}
    Alfa = rad2deg(angle(PoloDesejado1 - ZeroAvanco)); %Novamente a fun√ß√£o rad2deg() √© utilizada
    %{
        Para que seja poss√≠vel encontrar a posi√ß√£o do polo do avan√ßo, √©
        necess√°rio que o √¢ngulo Alfa seja maior que o m√≥dulo do √¢ngulo da
        defici√™ncia angular. Caso essa condi√ß√£o n√£o seja satisfeita, √©
        necess√°rio utilizar duas redes por avan√ßo de fase, cada uma
        contribuindo com a metade do √¢ngulo de avan√ßo de fase.
    %}
    if (Alfa > -DeficienciaAngular)
        %Se a condi√ß√£o for satisfeita, √© poss√≠vel calcular a posi√ß√£o do polo do avan√ßo
        PoloAvanco = -(PoloDesejadoImg - (PoloDesejadoReal*tand(Alfa+DeficienciaAngular)))/(tand(Alfa+DeficienciaAngular));
        %{
            Com o  zero e o polo do avan√ßo, √© poss√≠vel verificar se a parte do
            avan√ßo do compensador est√° contribuindo com o √¢ngulo correto.
            Com isso, a contribui√ß√£o angular do avan√ßo de fase deve ser o oposto da defici√™ncia angular
        %}
        Teste = rad2deg(angle(PoloDesejado1 - ZeroAvanco)) - rad2deg(angle(PoloDesejado1 - PoloAvanco));

        %Tamb√©m √© poss√≠vel encontrar os valores de T1 e Gama 
        T1 = -1/(ZeroAvanco); %O zero do avan√ßo √© utilizado para o c√°lculo de T1
        Gama = -PoloAvanco*T1; %O valor encontrado de T1 √© utilizado para encontrar o valor de Gama
        %{
            Tamb√©m √© poss√≠vel encontrar o valor de Kc, utilizando o polo
            desejado, a fun√ß√£o de tranfer√™ncia do sistema de controle e da
            parte do avan√ßo do compensador
        %}
        Kc = abs(((PoloDesejado1-PoloAvanco)*PoloDesejado1*(PoloDesejado1+1.5)*(PoloDesejado1+5))/((PoloDesejado1 - ZeroAvanco)*(2*(PoloDesejado1)^2 + 4*PoloDesejado1 + 34)));
        %{
            O Beta tamb√©m √© calculado para que o erro de regime permanente seja
            reduzido em 7 vezes. Para isso, o valor do novo Kv deve ser 7 vezes
            o valor do Kv antigo (sistema de controle sem o compensador)
        %}
        Beta = (7*Gama)/Kc;
    else
        %{
            Quando Alfa n√£o √© maior que o m√≥dulo do √¢ngulo da defici√™ncia
            angular, √© necess√°rio utilizar duas redes por avan√ßo de fase, onde cada
            uma realiza a metade do √¢ngulo de avan√ßo de fase
        %}
        DeficienciaAngularMetade = DeficienciaAngular/2; %A Defici√™ncia angular √© dividida pela metade
        
        %Com isso, √© calculado a posi√ß√£o do polo do avan√ßo
        PoloAvanco = -(PoloDesejadoImg - (PoloDesejadoReal*tand(Alfa+DeficienciaAngularMetade)))/(tand(Alfa+DeficienciaAngularMetade));
        %{
            Um teste √© realizado para verificar se a contribui√ß√£o do √¢ngulo de
            avan√ßo de fase est√° correta. Como cada rede realiza metade da
            contribui√ß√£o, √© necess√°rio realizar a multiplica√ß√£o por 2.
        %}
        Teste = 2*(rad2deg(angle(PoloDesejado1 - ZeroAvanco)) - rad2deg(angle(PoloDesejado1 - PoloAvanco)));
        
        %Tamb√©m √© poss√≠vel encontrar os valores de T1 e Gama
        T1 = -1/(ZeroAvanco); %O zero do avan√ßo √© utilizado para o c√°lculo de T1
        Gama = -PoloAvanco*T1; %O valor encontrado de T1 √© utilizado para encontrar o valor de Gama
        %{
            Tamb√©m √© poss√≠vel encontrar o valor de Kc, utilizando o polo
            desejado, a fun√ß√£o de tranfer√™ncia do sistema de controle e da
            parte do avan√ßo do compensador. Como existem duas redes por avan√ßo
            de fase, o c√°lculo do Kc √© diferente do realizado anteriormente (A
            fun√ß√£o de transfer√™ncia relacionada a parte do avan√ßo est√° elevada
            ao quadrado, devido ao uso das duas redes de avan√ßo de fase)
        %}
        Kc = abs((((PoloDesejado1-PoloAvanco)^2)*PoloDesejado1*(PoloDesejado1+1.5)*(PoloDesejado1+5))/(((PoloDesejado1 - ZeroAvanco)^2)*(2*(PoloDesejado1)^2 + 4*PoloDesejado1 + 34)));
       
        %O c√°lculo de Beta tamb√©m √© diferente devido ao uso das duas redes
        Beta = (7*(Gama^2))/Kc;
    end
    %{
        Depois disso, √© poss√≠vel encontrar os valores de T2 que atendem as
        especifica√ß√µes do projeto. Para isso, √© realizado um segundo for, onde s√£o testados valores de T2 entre 5 e 15 
    %}
    for T2 = 5:0.1:15
        %Primeiramente, √© calculado o m√≥dulo do compensador atraso
        ModuloAtraso = abs((PoloDesejado1 + (1/T2))/(PoloDesejado1 + (1)/(Beta*T2))); %Utiliza-se o valor de Beta calculado anteriormente
        
        %Depois, a contribui√ß√£o angular do compensador atraso √© calculada
        ContribuicaoAngularAtraso = rad2deg(angle((PoloDesejado1 + (1/T2))/(PoloDesejado1 + (1)/(Beta*T2)))); %O valor de Beta tamb√©m √© utilizado nessa conta
        %{
            Como especificado no projeto, o m√≥dulo do compensador atraso pode
            ter m√≥dulo de at√© 0.96 e contribui√ß√£o angular de at√© 5¬∞. Com isso,
            √© feito um if para verificar essa condi√ß√µes
        %}
        if (ModuloAtraso >= 0.96) && (ModuloAtraso <= 1) && (ContribuicaoAngularAtraso >= -5) && (ContribuicaoAngularAtraso <= 0)
            %{
                Como explicado anteriormente a fun√ß√£o de tranfer√™ncia do
                compensador avan√ßo-atraso pode ter duas formas diferentes. Com
                isso, √© necess√°rio realizar um outro if.
            %}
            if (Alfa > -DeficienciaAngular)
                Gc = Kc*((s+(1/T1))/(s+(Gama/T1)))*((s+(1/T2))/(s+(1/(Beta*T2)))); %Neste caso, √© utilizada apenas uma rede por avan√ßo de fase
            else
                %{
                    Quando s√£o utilizadas duas redes, a parte da fun√ß√£o de
                    transfer√™ncia relacionada ao avan√ßo de fase √© elevada ao
                    quadrado
                %}
                Gc = Kc*(((s+(1/T1))/(s+(Gama/T1)))^2)*((s+(1/T2))/(s+(1/(Beta*T2)))); 
            end
            %Com Gc, √© poss√≠vel encontrar a FTMF
            Gcomp = G*Gc/(1 + G*Gc);
            
            %Definindo vetor de tempo
            t = 0:0.1:50;
            
            %Aplicando degrau usando fun√ß√£o step()
            RespostaDegrau = step(Gcomp, t);
            
            %Criando uma vari√°vel a para c√°lculo do tempo de assentamento
            a = 501;
            %{
                O c√≥digo percorre o vetor de tr√°s para frente, procurando o 
                √∫ltimo instante em que a resposta y saiu da faixa de 
                toler√¢ncia de 2% em torno do valor final
            %}
            while (RespostaDegrau(a) > 0.98) && (RespostaDegrau(a) < 1.02) %No projeto, √© utilizada uma faixa de 2%
                a =  a - 1;
            end       
            %Com isso, √© poss√≠vel encontrar o tempo de assentamento
            ts = a*0.1;
            %Tamb√©m √© poss√≠vel encontrar o sobressinal utilizando a fun√ß√£o max()
            m = max(RespostaDegrau);
            %{
                Para o projeto, √© pedido um sobressinal menor que 18% e maior
                que 10%. Al√©m disso, o tempo de assentamento deve ser menor ou
                igual a 3.2s. Para verificar essas condi√ß√µes, um if √© criado.
            %}
            if (ts <= 3.2) && (m < 1.18) && (m > 1.1)
                %Atendida essas condi√ß√µes, os valores s√£o armazenados na matriz de solu√ß√µes
                k = k + 1; %A vari√°vel k √© um contador de solu√ß√µes
                
                %Matriz que armazena as solu√ß√µes
                solution(k,:) = [ZeroAvanco PoloAvanco Teste T1 Gama Kc Beta ts m Alfa a];
                %{
                    Os valores que atendem as condi√ß√µes do projeto tamb√©m s√£o
                    exibidos no command window
                %}
                disp('Zero do Avan√ßo:');
                disp(ZeroAvanco);
                disp('Polo do Avan√ßo:');
                disp(PoloAvanco);
                disp('Teste da Defici√™ncia angular:');
                disp(Teste);
                disp('T1:');
                disp(T1);
                disp('Gama:');
                disp(Gama);
                disp('Kc:');
                disp(Kc);
                disp('Beta:');
                disp(Beta);
                disp('Tempo de assentamento:');
                disp(ts);
                disp('Sobressinal:');
                disp(m);
                disp('------------------------');
            end
        end
    end
end
%{
    A matriz de solu√ß√µes √© colocada em ordem crescente de acordo com o
    sobressinal (Do menor para o maior sobressinal)
%}
sortsolution = sortrows(solution, 9);

%A matriz de solu√ß√µes ordenada √© exibida no command window
disp(sortsolution);

%O n√∫mero de solu√ß√µes tamb√©m √© mostrada
disp(['N√∫mero de solu√ß√µes: ', num2str(k)]);
disp('------------------------');

%A primeira linhha da matriz, ou seja, aquela que apresenta menor sobressinal, √© exibida no command window 
disp(sortsolution(1,1:11));
disp('------------------------');
%{
    Para tra√ßar os gr√°ficos, escolhemos a solu√ß√£o que apresenta o menor
    sobressinal que atenda as especifica√ß√µes do projeto. Para isso, os valores
    referentes a essa solu√ß√£o s√£o coletados na matriz (Como a matriz est√°
    ordenada, os valores se encontram na primeira linha)
%}
ZeroAvanco = sortsolution(1,1); PoloAvanco = sortsolution(1,2); Teste = sortsolution(1,3); T1 = sortsolution(1,4);
Gama = sortsolution(1,5); Kc = sortsolution(1,6); Beta = sortsolution(1,7); ts = sortsolution(1,8); m = sortsolution(1,9);
Alfa = sortsolution(1,10); a = sortsolution(1,11);
%{
    Como explicado anteriormente, o compensador pode ter uma ou duas redes por
    avan√ßo de fase. Com isso, √© necess√°rio realizar novamente o if.
%}
if (Alfa > -DeficienciaAngular)
    %Fun√ß√£o de transfer√™ncia do compensador com uma rede de avan√ßo de fase
    Gc = Kc*((s+(1/T1))/(s+(Gama/T1)))*((s+(1/T2))/(s+(1/(Beta*T2))));
else
    %Fun√ß√£o de tranfer√™ncia do compensador com duas redes de avan√ßo de fase
    Gc = Kc*(((s+(1/T1))/(s+(Gama/T1)))^2)*((s+(1/T2))/(s+(1/(Beta*T2))));
end
%Encontra-se a FTMF
Gcomp = G*Gc/(1 + G*Gc);

%Aplicando degrau na FTMF usando fun√ß√£o step()
RespostaDegrau = step(Gcomp, t);

%Tra√ßando o gr√°fico do lugar das ra√≠zes do sistema compensado
figure;
%{
    A fun√ß√£o rlocus √© utilizado para tra√ßar o LR. Como temos o compensador, Gc
    tamb√©m √© usado para tra√ßar o LR
%}
rlocus(G*Gc);
grid on;
hold on;

%Adicionando o t√≠tulo e nomeando os eixos
title('Lugar das ra√≠zes do sistema compensado');
xlabel('Real');
ylabel('Imagin√°rio');
%{
    Aqui, os novos polos de malha fechada dominantes s√£o destacados no gr√°fico.
    Esses polos ser√£o os polos desejados no projeto (Aqueles que fornecem Wn =
    1.9 rad/s e Amortecimento = 0.5)
%}
plot(real([PoloDesejado1 PoloDesejado2]), imag([PoloDesejado1 PoloDesejado2]), 'rx', 'MarkerSize', 10, 'LineWidth', 2); % 'rx' para marcar com 'X' vermelho

%Adi√ß√£o da legenda ao gr√°fico do LR
h1 = plot(NaN, NaN, 'rx', 'MarkerSize', 10, 'LineWidth', 2);
legend(h1, 'Novos polos de malha fechada dominantes');
hold off;
%{
    Tra√ßando o gr√°fico da resposta ao degrau unit√°rio at√© 50s (O vetor t √©
    novamente utilizado)
%}
figure;
%Plotando o gr√°fico utilizando a fun√ß√£o plot
plot(t, RespostaDegrau, '-');
grid on;

%Adicionando o t√≠tulo e nomeando os eixos
title('Resposta no tempo do sistema compensado ao degrau unit√°rio');
xlabel('Tempo t(s)');
ylabel('Amplitude de c(t)');
hold on;

%Nessa parte, o sobressinal √© destacado no gr√°fico
%{
    O valor no eixo y √© o valor m√°ximo da resposta ao degrau. Para descobrir o
    valor no eixo x desse ponto, √© realizada a seguinte l√≥gica:
%}
[m, idxMax] = max(RespostaDegrau); 
x_max = t(idxMax);
plot(x_max, m, 'r.', 'MarkerSize', 15); %Plotando o valor do sobressinal

%Aqui, o Tempo de assentamento √© destacado no gr√°fico
plot(ts, RespostaDegrau(a+1), 'g.', 'MarkerSize', 15);
%{
    Adicionando uma legenda manual para o sobressinal e o tempo de
    assentamento
%}
h1 = plot(NaN, NaN, 'r.', 'MarkerSize', 15);
h2 = plot(NaN, NaN, 'g.', 'MarkerSize', 15);

%Comando legend() usando as legendas manuais definidas anteriormente
legend([h1, h2], 'Sobressinal', 'Tempo de Assentamento');

%Criando um vetor de tempo t1 para tra√ßar o gr√°fico da respost a rampa
t_rampa = 0:0.1:200;
%{
    Para aplicar a rampa aqui no Matlab vamos usar o comando step(FT) mas
    aplicado a (1/s)*G
%}
rampa = step (Gcomp*(1/s), t_rampa);

%Plotando o gr√°fico
figure;
plot(t_rampa, rampa, 'b'); %Resposta a rampa unit√°rio do sistema compensado
grid on;
hold on;
plot(t_rampa,t_rampa,'--r'); %Rampa unit√°ria
%Configura√ß√£o do gr√°fico
legend('Resposta do Sistema Compensado a Rampa','Rampa Unit√°ria','Location','NorthWest');
xlabel('Tempo t(s)');
ylabel('Amplitude');
title('Resposta no tempo do sistema compensado a Rampa');
legend('Resposta do Sistema Compensado a Rampa','Rampa Unit√°ria','Location','NorthWest');
%{
    Calculo do erro. O erro ser√° a diferen√ßa entre o  valor da rampa unit√°ria
    em t = 200s, que √© 200, e o valor da resposta do sistema compensado a rampa
    em t = 200s
%}
Erro = 200 - rampa(2001);

%O erro √© exibido no command window
disp('O erro de regime permanente do sistema compensado √©:');
disp(Erro);
%{
    √â poss√≠vel perceber, com a execu√ß√£o do c√≥digo, que o erro diminuiu 7 vezes
    com a implementa√ß√£o do compensador
%}






